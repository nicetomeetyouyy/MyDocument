```
private void linkFirst(E e) {    final Node<E> f = first;    final Node<E> newNode = new Node<>(null, e, f);    first = newNode;    if (f == null)        last = newNode;    else        f.prev = newNode;    size++;    modCount++;}
```



#### 接口

接口的成员（字段 + 方法）默认都是 public 的，并且**不允许定义为 private 或者 protected**

#### Object通用方法

* 概览

  ```java
  public native int hashCode()
  
  public boolean equals(Object obj)
  
  protected native Object clone() throws CloneNotSupportedException
  
  public String toString()
  
  public final native Class<?> getClass()
  
  protected void finalize() throws Throwable {}
  
  public final native void notify()
  
  public final native void notifyAll()
  
  public final native void wait(long timeout) throws InterruptedException
  
  public final void wait(long timeout, int nanos) throws InterruptedException
  
  public final void wait() throws InterruptedException
  ```

  

* clone（）方法

  clone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，其它类就不能直接去调用该类实例的 clone() 方法。重写还需实现Cloneable 接口。Cloneable 接口只是规定，如果一个类没有实现 Cloneable 接口又调用了 clone() 方法，就会抛出 CloneNotSupportedException。

  

  使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。Effective Java 书上讲到，最好不要去使用 clone()，可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象。




## java容器源码分析

### 1.ArrayList

* ArrayList 是基于数组实现的，所以支持快速随机访问。RandomAccess 接口标识着该类支持快速随机访问

```java
public class ArrayList<E> extends AbstractList<E>
        implements List<E>, RandomAccess, Cloneable, java.io.Serializable
{
    private static final long serialVersionUID = 8683452581122892189L;
    //数组默认大小10
    private static final int DEFAULT_CAPACITY = 10;
    //空数组
    private static final Object[] EMPTY_ELEMENTDATA = {};
    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};
    //保存数据的数组
    transient Object[] elementData;
    //元素个数
    private int size;

```

* 构造函数分析

```java
//带参数的构造函数指定initialCapacity大小的容量 
public ArrayList(int initialCapacity) {
        if (initialCapacity > 0) {
            this.elementData = new Object[initialCapacity];
        } else if (initialCapacity == 0) {
            //为0创建空数组
            this.elementData = EMPTY_ELEMENTDATA;
        } else {
            throw new IllegalArgumentException("Illegal Capacity: "+
                                               initialCapacity);
        }
    }

  //默认构造函数，DEFAULTCAPACITY_EMPTY_ELEMENTDATA 为0.初始化为10，也就是说初始其实是空数组 当添加第一个元素的时候数组容量才变成10
    public ArrayList() {
        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
    }

 //构造一个包含指定集合的元素的列表，按照它们由集合的迭代器返回的顺序。
    public ArrayList(Collection<? extends E> c) {
        elementData = c.toArray();
        if ((size = elementData.length) != 0) {
            // c.toArray 可能返回的不是Object类型的数组所以加上下面的语句用于判断
            if (elementData.getClass() != Object[].class)
                elementData = Arrays.copyOf(elementData, size, Object[].class);
        } else {
            // 空数组
            this.elementData = EMPTY_ELEMENTDATA;
        }
    }

```

* 方法

  ```java
  //将容量大小设置为实际元素个数的大小
  public void trimToSize() {
          modCount++;
          if (size < elementData.length) {
              elementData = (size == 0)
                ? EMPTY_ELEMENTDATA
                : Arrays.copyOf(elementData, size);
          }
      }
  
  
  ```

* 扩容机制

  ```java
  //增加此ArrayList实例的容量，以确保它至少能容纳元素的数量
  //判断输入的容量是否比初始容量大，是的话就用输入的容量大小扩容
  public void ensureCapacity(int minCapacity) {
          int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)
              ? 0   : DEFAULT_CAPACITY;
  
          if (minCapacity > minExpand) {
              ensureExplicitCapacity(minCapacity);
          }
      }
  //返回扩容因子（和默认大小比较）
      private static int calculateCapacity(Object[] elementData, int minCapacity) {
          if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
              return Math.max(DEFAULT_CAPACITY, minCapacity);
          }
          return minCapacity;
      }
  //得到最小扩容量并判断是否需要扩容（需要则扩容），在添加元素时会用到此方法
      private void ensureCapacityInternal(int minCapacity) {
          ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));
      }
  //判断是否需要扩容（需要则扩容）
      private void ensureExplicitCapacity(int minCapacity) {
          modCount++;
  
          // overflow-conscious code
          if (minCapacity - elementData.length > 0)
              grow(minCapacity);
      }
  //最大数组的大小
      private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;
  
  //进行扩容
      private void grow(int minCapacity) {
          // oldCapacity为原数组大小
          int oldCapacity = elementData.length;
          //新的容量为旧的1.5倍（右移一位相当于/2）
          int newCapacity = oldCapacity + (oldCapacity >> 1);
          //新容量小于最小需要容量将新容量设置为最小需要容量
          if (newCapacity - minCapacity < 0)
              newCapacity = minCapacity;
          //新容量大于最大数组大小将新容量则调用hugeCapacity()来比较minCapacity和 MAX_ARRAY_SIZE
          if (newCapacity - MAX_ARRAY_SIZE > 0)
              newCapacity = hugeCapacity(minCapacity);
          // minCapacity is usually close to size, so this is a win:
          elementData = Arrays.copyOf(elementData, newCapacity);
      }
  //比较最小需要容量和MAX_ARRAY_SIZE，返回整数最大或最大容量
      private static int hugeCapacity(int minCapacity) {
          if (minCapacity < 0) // overflow
              throw new OutOfMemoryError();
          return (minCapacity > MAX_ARRAY_SIZE) ?
              Integer.MAX_VALUE :
              MAX_ARRAY_SIZE;
      }
  ```

* 方法

  ```java
  //返回此列表中指定元素的首次出现的索引，如果此列表不包含此元素，则为-1
  public int indexOf(Object o) {
          if (o == null) {
              for (int i = 0; i < size; i++)
                  if (elementData[i]==null)
                      return i;
          } else {
              for (int i = 0; i < size; i++)
                  if (o.equals(elementData[i]))
                      return i;
          }
          return -1;
      }
      /**
       *返回此列表中的元素数。 
       */
      public int size() {
          return size;
      }
  
      /**
       * 如果此列表不包含元素，则返回 true 。
       */
      public boolean isEmpty() {
          //注意=和==的区别
          return size == 0;
      }
  
      /**
       * 如果此列表包含指定的元素，则返回true 。
       */
      public boolean contains(Object o) {
          //indexOf()方法：返回此列表中指定元素的首次出现的索引，如果此列表不包含此元素，则为-1 
          return indexOf(o) >= 0;
      }
  
  //返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1
   public int lastIndexOf(Object o) {
          if (o == null) {
              for (int i = size-1; i >= 0; i--)
                  if (elementData[i]==null)
                      return i;
          } else {
              for (int i = size-1; i >= 0; i--)
                  if (o.equals(elementData[i]))
                      return i;
          }
          return -1;
      }
  //返回此ArrayList实例的浅拷贝。 （元素本身不被复制。）
  public Object clone() {
          try {
              ArrayList<?> v = (ArrayList<?>) super.clone();
              v.elementData = Arrays.copyOf(elementData, size);
              v.modCount = 0;
              return v;
          } catch (CloneNotSupportedException e) {
              // this shouldn't happen, since we are Cloneable
              throw new InternalError(e);
          }
      }
  //将ArrayList转化为T类型的数组
   public <T> T[] toArray(T[] a) {
       //a长度小于list长度返回ArrayList数组的内容
          if (a.length < size)
              // Make a new array of a's runtime type, but my contents:
              return (T[]) Arrays.copyOf(elementData, size, a.getClass());
       //将ArrayList数组的内容复制到a
          System.arraycopy(elementData, 0, a, 0, size);
       //如果a数组长度大于ArrayList数组长度将超出长度第一位设置为空
          if (a.length > size)
              a[size] = null;
          return a;
      }
  //越界检查
     private void rangeCheck(int index) {
          if (index >= size)
              throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
      }
  
  //按照索引获取元素
    public E get(int index) {
          rangeCheck(index);
  
          return elementData(index);
      }
  
      /**
      * 在对应索引设置元素并返回旧值
       */
      public E set(int index, E element) {
          //越界检查
          rangeCheck(index);
  
          E oldValue = elementData(index);
          elementData[index] = element;
          return oldValue;
      }
  
      /**
       * 添加元素
       */
      public boolean add(E e) {
          //判断是否需要扩容，需要就扩容
          ensureCapacityInternal(size + 1);  // Increments modCount!!
          elementData[size++] = e;
          return true;
      }
  
  //在index位置添加数据
    public void add(int index, E element) {
        //越界检查
          rangeCheckForAdd(index);
            //判断是否需要扩容，需要就扩容
          ensureCapacityInternal(size + 1);  // Increments modCount!!
        //将index~size的数据复制到index+1~size+1
          System.arraycopy(elementData, index, elementData, index + 1,
                           size - index);
          elementData[index] = element;
          size++;
      }
  
  //删除index上的元素，并返回被删除的元素
   public E remove(int index) {
          rangeCheck(index);
          modCount++;
          E oldValue = elementData(index);
  //需要移动的元素个数
          int numMoved = size - index - 1;
          if (numMoved > 0)
              System.arraycopy(elementData, index+1, elementData, index,
                               numMoved);
          elementData[--size] = null; // clear to let GC do its work
  
          return oldValue;
      }
  
  //从ArrayList中删除指定元素的第一个出现（如果存在）。 如果列表不包含该元素，则它不会更改。
    public boolean remove(Object o) {
          if (o == null) {
              for (int index = 0; index < size; index++)
                  if (elementData[index] == null) {
                      fastRemove(index);
                      return true;
                  }
          } else {
              for (int index = 0; index < size; index++)
                  if (o.equals(elementData[index])) {
                      fastRemove(index);
                      return true;
                  }
          }
          return false;
      }
  
  //按索引快速删除（不返回被删除的元素）
    private void fastRemove(int index) {
          modCount++;
          int numMoved = size - index - 1;
          if (numMoved > 0)
              System.arraycopy(elementData, index+1, elementData, index,
                               numMoved);
          elementData[--size] = null; // clear to let GC do its work
      }
  
  //将ArrayList的元素全部擦除
      public void clear() {
          modCount++;
  
          // clear to let GC do its work
          for (int i = 0; i < size; i++)
              elementData[i] = null;
  
          size = 0;
      }
  
  
  //按照指定集合的Iterator返回的顺序将指定集合中的所有元素追加到此ArrayList的末尾
      public boolean addAll(Collection<? extends E> c) {
          Object[] a = c.toArray();
          int numNew = a.length;
          ensureCapacityInternal(size + numNew);  // Increments modCount
          System.arraycopy(a, 0, elementData, size, numNew);
          size += numNew;
          return numNew != 0;
      }
  
  //将指定集合中的所有元素从指定的位置开始插入到此列表中，
      public boolean addAll(int index, Collection<? extends E> c) {
          rangeCheckForAdd(index);
  
          Object[] a = c.toArray();
          int numNew = a.length;
          ensureCapacityInternal(size + numNew);  // Increments modCount
  
          int numMoved = size - index;
          if (numMoved > 0)
              //将原来指定位置开始的元素移到末尾
              System.arraycopy(elementData, index, elementData, index + numNew，numMoved);
        
          System.arraycopy(a, 0, elementData, index, numNew);
          size += numNew;
          return numNew != 0;
      }
  
  //从此列表中删除所有索引为fromIndex （含）和toIndex之间的元素。
      protected void removeRange(int fromIndex, int toIndex) {
          modCount++;
          int numMoved = size - toIndex;
          System.arraycopy(elementData, toIndex, elementData, fromIndex,
                           numMoved);
  
          // clear to let GC do its work
          int newSize = size - (toIndex-fromIndex);
          for (int i = newSize; i < size; i++) {
              elementData[i] = null;
          }
          size = newSize;
      }
  
      /**
       * 返回IndexOutOfBoundsException细节信息
       */
      private String outOfBoundsMsg(int index) {
          return "Index: "+index+", Size: "+size;
      }
  /**
       * 从此列表中删除指定集合中包含的所有元素。 
       */
      public boolean removeAll(Collection<?> c) {
          Objects.requireNonNull(c);
          //如果此列表被修改则返回true
          return batchRemove(c, false);
      }
  
      /**
       * 保留此列表中包含在指定集合中的元素。
       * 
       */
      public boolean retainAll(Collection<?> c) {
          Objects.requireNonNull(c);
          return batchRemove(c, true);
      }
  //complement为true保留此ArrayList中包含在指定集合中的元素。false删除指定集合中包含的所有元素
  private boolean batchRemove(Collection<?> c, boolean complement) {
          final Object[] elementData = this.elementData;
          int r = 0, w = 0;
          boolean modified = false;
          try {
              for (; r < size; r++)
                  if (c.contains(elementData[r]) == complement)
                      elementData[w++] = elementData[r];
          } finally {
              // Preserve behavioral compatibility with AbstractCollection,
              // even if c.contains() throws.
              if (r != size) {
                  System.arraycopy(elementData, r,
                                   elementData, w,
                                   size - r);
                  w += size - r;
              }
              if (w != size) {
                  // clear to let GC do its work
                  for (int i = w; i < size; i++)
                      elementData[i] = null;
                  modCount += size - w;
                  size = w;
                  modified = true;
              }
          }
          return modified;
      }
  
  
  
  
  ```

  

* 迭代器

  ```java
  //内部类实现迭代器接口
  private class Itr implements Iterator<E> {
          int cursor;       // index of next element to return
          int lastRet = -1; // index of last element returned; -1 if no such
          int expectedModCount = modCount;
  
          Itr() {}
  
          public boolean hasNext() {
              return cursor != size;
          }
  
          @SuppressWarnings("unchecked")
          public E next() {
              checkForComodification();
              int i = cursor;
              if (i >= size)
                  throw new NoSuchElementException();
              Object[] elementData = ArrayList.this.elementData;
              if (i >= elementData.length)
                  throw new ConcurrentModificationException();
              cursor = i + 1;
              return (E) elementData[lastRet = i];
          }
  
          public void remove() {
              if (lastRet < 0)
                  throw new IllegalStateException();
              checkForComodification();
  
              try {
                  ArrayList.this.remove(lastRet);
                  cursor = lastRet;
                  lastRet = -1;
                  expectedModCount = modCount;
              } catch (IndexOutOfBoundsException ex) {
                  throw new ConcurrentModificationException();
              }
          }
       
      
      //有序的迭代器，可向前迭代，设置元素的值，增加元素
        private class ListItr extends Itr implements ListIterator<E> {
          ListItr(int index) {
              super();
              cursor = index;
          }
  
          public boolean hasPrevious() {
              return cursor != 0;
          }
  
          public int nextIndex() {
              return cursor;
          }
  
          public int previousIndex() {
              return cursor - 1;
          }
  
          @SuppressWarnings("unchecked")
          public E previous() {
              checkForComodification();
              int i = cursor - 1;
              if (i < 0)
                  throw new NoSuchElementException();
              Object[] elementData = ArrayList.this.elementData;
              if (i >= elementData.length)
                  throw new ConcurrentModificationException();
              cursor = i;
              return (E) elementData[lastRet = i];
          }
  
          public void set(E e) {
              if (lastRet < 0)
                  throw new IllegalStateException();
              checkForComodification();
  
              try {
                  ArrayList.this.set(lastRet, e);
              } catch (IndexOutOfBoundsException ex) {
                  throw new ConcurrentModificationException();
              }
          }
  
          public void add(E e) {
              checkForComodification();
  
              try {
                  int i = cursor;
                  ArrayList.this.add(i, e);
                  cursor = i + 1;
                  lastRet = -1;
                  expectedModCount = modCount;
              } catch (IndexOutOfBoundsException ex) {
                  throw new ConcurrentModificationException();
              }
          }
      }
      
  
      /**
       * 从列表中的指定位置开始，返回列表中的元素（按正确顺序）的列表迭代器。
       *指定的索引表示初始调用将返回的第一个元素为next 。 初始调用previous将返回指定索引减1的元素。 
       *返回的列表迭代器是fail-fast 。 
       */
      public ListIterator<E> listIterator(int index) {
          if (index < 0 || index > size)
              throw new IndexOutOfBoundsException("Index: "+index);
          return new ListItr(index);
      }
  
      /**
       *返回列表中的列表迭代器（按适当的顺序）。 
       *返回的列表迭代器是fail-fast 。
       */
      public ListIterator<E> listIterator() {
          return new ListItr(0);
      }
  
      /**
       *以正确的顺序返回该列表中的元素的迭代器。 
       *返回的迭代器是fail-fast 。 
       */
      public Iterator<E> iterator() {
          return new Itr();
      }
  
  
  ```

### 2.LinkedList

* 构造函数

  ```java
  
  public class LinkedList<E>
      extends AbstractSequentialList<E>
      implements List<E>, Deque<E>, Cloneable, java.io.Serializable
  {
      //元素个数
      transient int size = 0;
      //头结点指针
      transient Node<E> first;
  
      //尾节点指针
      transient Node<E> last;
  
      //空构造函数
      public LinkedList() {
      }
  
      //用已有的集合创建链表的构造方法
      public LinkedList(Collection<? extends E> c) {
          this();
          addAll(c);
      }
  ```

* 内部私有类Node

  ```java
    private static class Node<E> {
          E item;
          Node<E> next;
          Node<E> prev;
  
          Node(Node<E> prev, E element, Node<E> next) {
              this.item = element;
              this.next = next;
              this.prev = prev;
          }
      }
  ```

  

* 内部结构分析

  ![1571015430456](picture/1571015430456.png)

* 元素插入

  

  ```java
  //头插法    
  private void linkFirst(E e) {
          final Node<E> f = first;
          final Node<E> newNode = new Node<>(null, e, f);
          first = newNode;
          if (f == null)
              last = newNode;
          else
              f.prev = newNode;
          size++;
          modCount++;
      }
  
  //尾插法
  void linkLast(E e) {
          final Node<E> l = last;
          final Node<E> newNode = new Node<>(l, e, null);
          last = newNode;
          if (l == null)
              first = newNode;
          else
              l.next = newNode;
          size++;
          modCount++;
      }
  //在某个节点之前插入数据
      void linkBefore(E e, Node<E> succ) {
          // assert succ != null;
          final Node<E> pred = succ.prev;
          final Node<E> newNode = new Node<>(pred, e, succ);
          succ.prev = newNode;
          if (pred == null)
              first = newNode;
          else
              pred.next = newNode;
          size++;
          modCount++;
      }
  //释放头结点
      private E unlinkFirst(Node<E> f) {
          // assert f == first && f != null;
          final E element = f.item;
          final Node<E> next = f.next;
          f.item = null;
          f.next = null; // help GC
          first = next;
          if (next == null)
              last = null;
          else
              next.prev = null;
          size--;
          modCount++;
          return element;
      }
  
  //释放尾节点
   private E unlinkLast(Node<E> l) {
          // assert l == last && l != null;
          final E element = l.item;
          final Node<E> prev = l.prev;
          l.item = null;
          l.prev = null; // help GC
          last = prev;
          if (prev == null)
              first = null;
          else
              prev.next = null;
          size--;
          modCount++;
          return element;
      }
  
  //移除某个节点
      E unlink(Node<E> x) {
          // assert x != null;
          final E element = x.item;
          final Node<E> next = x.next;
          final Node<E> prev = x.prev;
  
          if (prev == null) {
              first = next;
          } else {
              prev.next = next;
              x.prev = null;
          }
  
          if (next == null) {
              last = prev;
          } else {
              next.prev = prev;
              x.next = null;
          }
  
          x.item = null;
          size--;
          modCount++;
          return element;
      }
  
  //索引遍历,需要不断移动，所以一般查找比较慢
  Node<E> node(int index) {
          // assert isElementIndex(index);
  
          if (index < (size >> 1)) {
              Node<E> x = first;
              for (int i = 0; i < index; i++)
                  x = x.next;
              return x;
          } else {
              Node<E> x = last;
              for (int i = size - 1; i > index; i--)
                  x = x.prev;
              return x;
          }
      }
  
  
  
  
  ```

* add方法

  ```java
  //头插法插入元素 
  public void addFirst(E e) {
          linkFirst(e);
      }
  //尾插法插入元素
   public void addLast(E e) {
          linkLast(e);
      }
  //默认add方法使用尾插法
  public boolean add(E e) {
          linkLast(e);
          return true;
      }
  //插入集合的元素
   public boolean addAll(Collection<? extends E> c) {
          return addAll(size, c);
      }
  //在index位置开始插入集合元素
  public boolean addAll(int index, Collection<? extends E> c) {
          checkPositionIndex(index);
  
          Object[] a = c.toArray();
          int numNew = a.length;
          if (numNew == 0)
              return false;
  
          Node<E> pred, succ;
          if (index == size) {
              succ = null;
              pred = last;
          } else {
              succ = node(index);
              pred = succ.prev;
          }
  
          for (Object o : a) {
              @SuppressWarnings("unchecked") E e = (E) o;
              Node<E> newNode = new Node<>(pred, e, null);
              if (pred == null)
                  first = newNode;
              else
                  pred.next = newNode;
              pred = newNode;
          }
  
          if (succ == null) {
              last = pred;
          } else {
              pred.next = succ;
              succ.prev = pred;
          }
  
          size += numNew;
          modCount++;
          return true;
      }
  //在index位置上插入元素
  public void add(int index, E element) {
          checkPositionIndex(index);
  
          if (index == size)
              linkLast(element);
          else
              linkBefore(element, node(index));
      }
  ```

* 根据位置获取数据的方法

  * get(int index)： 根据指定索引返回数据

  ```java
  
  public E get(int index) {
          //检查index范围是否在size之内
          checkElementIndex(index);
          //调用Node(index)去找到index对应的node然后返回它的值
          return node(index).item;
      }
  ```

  * **获取头节点（index=0）数据方法:**

    ```java
    public E getFirst() {
            final Node<E> f = first;
            if (f == null)
                throw new NoSuchElementException();
            return f.item;
        }
    public E element() {
            return getFirst();
        }
    public E peek() {
            final Node<E> f = first;
            return (f == null) ? null : f.item;
        }
    
    public E peekFirst() {
            final Node<E> f = first;
            return (f == null) ? null : f.item;
         }
    ```

  getFirst(),element(),peek(),peekFirst() 这四个获取头结点方法的区别在于对链表为空时的处理，是抛出异常还是返回null，其中**getFirst()** 和**element()** 方法将会在链表为空时，抛出异常

  element()方法的内部就是使用getFirst()实现的。它们会在链表为空时，抛出NoSuchElementException

  * **获取尾节点（index=-1）数据方法**

    ```java
    public E getLast() {
            final Node<E> l = last;
            if (l == null)
                throw new NoSuchElementException();
            return l.item;
        }
     public E peekLast() {
            final Node<E> l = last;
            return (l == null) ? null : l.item;
        }
    ```

     **getLast()** 方法在链表为空时，会抛出**NoSuchElementException**，而**peekLast()** 则不会，只是会返回 **null**

  

  * 根据对象获得索引的办法

    **int indexOf(Object o)：** 从头遍历找

    ```java
    public int indexOf(Object o) {
            int index = 0;
            if (o == null) {
                //从头遍历
                for (Node<E> x = first; x != null; x = x.next) {
                    if (x.item == null)
                        return index;
                    index++;
                }
            } else {
                //从头遍历
                for (Node<E> x = first; x != null; x = x.next) {
                    if (o.equals(x.item))
                        return index;
                    index++;
                }
            }
            return -1;
        }
    ```

    **int lastIndexOf(Object o)：** 从尾遍历找

    ```java
    public int lastIndexOf(Object o) {
            int index = size;
            if (o == null) {
                //从尾遍历
                for (Node<E> x = last; x != null; x = x.prev) {
                    index--;
                    if (x.item == null)
                        return index;
                }
            } else {
                //从尾遍历
                for (Node<E> x = last; x != null; x = x.prev) {
                    index--;
                    if (o.equals(x.item))
                        return index;
                }
            }
            return -1;
        }
    ```

  * 删除方法

    **remove()** ,**removeFirst(),pop():** 删除头节点

    ```java
    public E pop() {
            return removeFirst();
        }
    public E remove() {
            return removeFirst();
        }
    public E removeFirst() {
            final Node<E> f = first;
            if (f == null)
                throw new NoSuchElementException();
            return unlinkFirst(f);
        }
    ```

    **removeLast(),pollLast():** 删除尾节点

    ```java
    public E removeLast() {
            final Node<E> l = last;
            if (l == null)
                throw new NoSuchElementException();
            return unlinkLast(l);
        }
    public E pollLast() {
            final Node<E> l = last;
            return (l == null) ? null : unlinkLast(l);
        }
    ```

    **区别：** removeLast()在链表为空时将抛出NoSuchElementException，而pollLast()方法返回null。

    **remove(Object o):** 删除指定元素

    ```java
    public boolean remove(Object o) {
            //如果删除对象为null
            if (o == null) {
                //从头开始遍历
                for (Node<E> x = first; x != null; x = x.next) {
                    //找到元素
                    if (x.item == null) {
                       //从链表中移除找到的元素
                        unlink(x);
                        return true;
                    }
                }
            } else {
                //从头开始遍历
                for (Node<E> x = first; x != null; x = x.next) {
                    //找到元素
                    if (o.equals(x.item)) {
                        //从链表中移除找到的元素
                        unlink(x);
                        return true;
                    }
                }
            }
            return false;
        }
    ```

    当删除指定对象时，只需调用remove(Object o)即可，不过该方法一次只会删除一个匹配的对象，如果删除了匹配对象，返回true，否则false。

    unlink(Node x) 方法：

    ```java
    E unlink(Node<E> x) {
            // assert x != null;
            final E element = x.item;
            final Node<E> next = x.next;//得到后继节点
            final Node<E> prev = x.prev;//得到前驱节点
    
            //删除前驱指针
            if (prev == null) {
                first = next;//如果删除的节点是头节点,令头节点指向该节点的后继节点
            } else {
                prev.next = next;//将前驱节点的后继节点指向后继节点
                x.prev = null;
            }
    
            //删除后继指针
            if (next == null) {
                last = prev;//如果删除的节点是尾节点,令尾节点指向该节点的前驱节点
            } else {
                next.prev = prev;
                x.next = null;
            }
    
            x.item = null;
            size--;
            modCount++;
            return element;
        }
    ```

    **remove(int index)**：删除指定位置的元素

    ```java
    public E remove(int index) {
            //检查index范围
            checkElementIndex(index);
            //将节点删除
            return unlink(node(index));
        }
    ```

  

### 3.HashMap

* 类的属性

  ```java
  public class HashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>, Cloneable, Serializable {
      // 序列号
      private static final long serialVersionUID = 362498820763181265L;    
      // 默认的初始容量是16
      static final int DEFAULT_INITIAL_CAPACITY = 1 << 4;   
      // 最大容量
      static final int MAXIMUM_CAPACITY = 1 << 30; 
      // 默认的填充因子
      static final float DEFAULT_LOAD_FACTOR = 0.75f;
      // 当桶(bucket)上的结点数大于这个值时会转成红黑树
      static final int TREEIFY_THRESHOLD = 8; 
      // 当桶(bucket)上的结点数小于这个值时树转链表
      static final int UNTREEIFY_THRESHOLD = 6;
      // 桶中结构转化为红黑树对应的table的最小大小
      static final int MIN_TREEIFY_CAPACITY = 64;
      // 存储元素的数组，总是2的幂次倍
      transient Node<k,v>[] table; 
      // 存放具体元素的集
      transient Set<map.entry<k,v>> entrySet;
      // 存放元素的个数，注意这个不等于数组的长度。
      transient int size;
      // 每次扩容和更改map结构的计数器
      transient int modCount;   
      // 临界值 当实际大小(容量*填充因子)超过临界值时，会进行扩容
      int threshold;
      // 加载因子
      final float loadFactor;
  }
  ```

* Node节点类

  ```java
  // 继承自 Map.Entry<K,V>
  static class Node<K,V> implements Map.Entry<K,V> {
         final int hash;// 哈希值，存放元素到hashmap中时用来与其他元素hash值比较
         final K key;//键
         V value;//值
         // 指向下一个节点
         Node<K,V> next;
         Node(int hash, K key, V value, Node<K,V> next) {
              this.hash = hash;
              this.key = key;
              this.value = value;
              this.next = next;
          }
          public final K getKey()        { return key; }
          public final V getValue()      { return value; }
          public final String toString() { return key + "=" + value; }
          // 重写hashCode()方法
          public final int hashCode() {
              return Objects.hashCode(key) ^ Objects.hashCode(value);
          }
  
          public final V setValue(V newValue) {
              V oldValue = value;
              value = newValue;
              return oldValue;
          }
          // 重写 equals() 方法
          public final boolean equals(Object o) {
              if (o == this)
                  return true;
              if (o instanceof Map.Entry) {
                  Map.Entry<?,?> e = (Map.Entry<?,?>)o;
                  if (Objects.equals(key, e.getKey()) &&
                      Objects.equals(value, e.getValue()))
                      return true;
              }
              return false;
          }
  }
  ```

* 树节点类

  ```java
  static final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {
          TreeNode<K,V> parent;  // 父
          TreeNode<K,V> left;    // 左
          TreeNode<K,V> right;   // 右
          TreeNode<K,V> prev;    // needed to unlink next upon deletion
          boolean red;           // 判断颜色
          TreeNode(int hash, K key, V val, Node<K,V> next) {
              super(hash, key, val, next);
          }
          // 返回根节点
          final TreeNode<K,V> root() {
              for (TreeNode<K,V> r = this, p;;) {
                  if ((p = r.parent) == null)
                      return r;
                  r = p;
         }
  ```

  

* 构造方法

  ```java
  // 默认构造函数。
      public HashMap() {
          this.loadFactor = DEFAULT_LOAD_FACTOR; // all   other fields defaulted
       }
  
       // 包含另一个“Map”的构造函数
       public HashMap(Map<? extends K, ? extends V> m) {
           this.loadFactor = DEFAULT_LOAD_FACTOR;
           putMapEntries(m, false);//下面会分析到这个方法
       }
  
       // 指定“容量大小”的构造函数
       public HashMap(int initialCapacity) {
           this(initialCapacity, DEFAULT_LOAD_FACTOR);
       }
  
       // 指定“容量大小”和“加载因子”的构造函数
       public HashMap(int initialCapacity, float loadFactor) {
           if (initialCapacity < 0)
               throw new IllegalArgumentException("Illegal initial capacity: " + initialCapacity);
           if (initialCapacity > MAXIMUM_CAPACITY)
               initialCapacity = MAXIMUM_CAPACITY;
           if (loadFactor <= 0 || Float.isNaN(loadFactor))
               throw new IllegalArgumentException("Illegal load factor: " + loadFactor);
           this.loadFactor = loadFactor;
           this.threshold = tableSizeFor(initialCapacity);
       }
  
  //putMapEntries方法
  final void putMapEntries(Map<? extends K, ? extends V> m, boolean evict) {
      int s = m.size();
      if (s > 0) {
          // 判断table是否已经初始化
          if (table == null) { // pre-size
              // 未初始化，s为m的实际元素个数
              float ft = ((float)s / loadFactor) + 1.0F;
              int t = ((ft < (float)MAXIMUM_CAPACITY) ?
                      (int)ft : MAXIMUM_CAPACITY);
              // 计算得到的t大于阈值，则初始化阈值
              if (t > threshold)
                  threshold = tableSizeFor(t);
          }
          // 已初始化，并且m元素个数大于阈值，进行扩容处理
          else if (s > threshold)
              resize();
          // 将m中的所有元素添加至HashMap中
          for (Map.Entry<? extends K, ? extends V> e : m.entrySet()) {
              K key = e.getKey();
              V value = e.getValue();
              putVal(hash(key), key, value, false, evict);//
          }
      }
  }
  ```

* resize()扩容方法

  ```java
  final Node<K,V>[] resize() {
      Node<K,V>[] oldTab = table;
      int oldCap = (oldTab == null) ? 0 : oldTab.length;
      int oldThr = threshold;
      int newCap, newThr = 0;
      if (oldCap > 0) {
          // 超过最大值就不再扩充了，就只好随你碰撞去吧
          if (oldCap >= MAXIMUM_CAPACITY) {
              threshold = Integer.MAX_VALUE;
              return oldTab;
          }
          // 没超过最大值，就扩充为原来的2倍
          else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY && oldCap >= DEFAULT_INITIAL_CAPACITY)
              newThr = oldThr << 1; // double threshold
      }
      else if (oldThr > 0) // initial capacity was placed in threshold
          newCap = oldThr;
      else { 
          // signifies using defaults
          newCap = DEFAULT_INITIAL_CAPACITY;
          newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
      }
      // 计算新的resize上限
      if (newThr == 0) {
          float ft = (float)newCap * loadFactor;
          newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE);
      }
      threshold = newThr;
      @SuppressWarnings({"rawtypes","unchecked"})
          Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];
      table = newTab;
      if (oldTab != null) {
          // 把每个bucket都移动到新的buckets中
          for (int j = 0; j < oldCap; ++j) {
              Node<K,V> e;
              if ((e = oldTab[j]) != null) {
                  oldTab[j] = null;
                  if (e.next == null)
                      newTab[e.hash & (newCap - 1)] = e;
                  else if (e instanceof TreeNode)
                      ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);
                  else { 
                      Node<K,V> loHead = null, loTail = null;
                      Node<K,V> hiHead = null, hiTail = null;
                      Node<K,V> next;
                      do {
                          next = e.next;
                          // 原索引
                          if ((e.hash & oldCap) == 0) {
                              if (loTail == null)
                                  loHead = e;
                              else
                                  loTail.next = e;
                              loTail = e;
                          }
                          // 原索引+oldCap
                          else {
                              if (hiTail == null)
                                  hiHead = e;
                              else
                                  hiTail.next = e;
                              hiTail = e;
                          }
                      } while ((e = next) != null);
                      // 原索引放到bucket里
                      if (loTail != null) {
                          loTail.next = null;
                          newTab[j] = loHead;
                      }
                      // 原索引+oldCap放到bucket里
                      if (hiTail != null) {
                          hiTail.next = null;
                          newTab[j + oldCap] = hiHead;
                      }
                  }
              }
          }
      }
      return newTab;
  }
  ```

  